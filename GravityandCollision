import java.awt.*;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
public class GravityandCollision {
	private int x, y, speed;
	private int xa = 0;
	 private int ya = 0;
	private BufferedImage flappy = null;
	private BufferedImage turtle = null;
	private BufferedImage Pumpkin = null;
	private BufferedImage snowman = null;
	private BufferedImage mike = null;
	private BufferedImage gameOverScreen = null;
	private BufferedImage Level2GameOver = null;
	private BufferedImage Level3GameOver = null;
	private BufferedImage Level4GameOver = null;
	private BufferedImage Level5GameOver = null;
	private BufferedImage jeffery = null;


	private boolean isJumping = false;
	private boolean moving = false;
	private boolean gameOver = false;
	private boolean moveUp = true;
	private boolean moveDown = false;
 	private boolean easyMode = false;
	private boolean right = false, left = false;
	private Boolean up = false, down = false;
	private Level1 Level1;
	private Level2 Level2;
	private Level3 Level3;
	private Level4 Level4;
	private Level5 Level5;
	
	private static boolean gamePhase1 = false;
	
	GravityandCollision(int x, int y, boolean space, Level1 a, Level2 b, Level3 c, Level4 d, Level5 f){
		this.x = x;
		this.y = y;
		this.isJumping = isJumping;
		this.speed = 0;
		this.moving = true;
		try {
		    flappy = ImageIO.read(new File("Flappy.png"));		
		    turtle = ImageIO.read(new File("turtle.png"));
		    Pumpkin = ImageIO.read(new File("Pumpkin.png"));
		    snowman = ImageIO.read(new File("snowman.png"));
		    mike = ImageIO.read(new File("mike.png"));
		    gameOverScreen = ImageIO.read(new File("Level1GameOver.png"));
		    Level2GameOver = ImageIO.read(new File("Level2GameOver.png"));
		    Level3GameOver = ImageIO.read(new File("Level3GameOver.png"));
		    Level4GameOver = ImageIO.read(new File("Level4GameOver.png"));
		    Level5GameOver = ImageIO.read(new File("Level5GameOver.png"));
			jeffery = ImageIO.read(new File("jeffery.png"));



		    
		} catch (IOException e) {
		    System.out.println("No Image");
		}
		this.Level1 = a;
		this.Level2 = b;
		this.Level3 = c;
		this.Level4 = d;
		this.Level5 = f;
		
		
		
	}
	public int getX() {
		return x;
	}
	public void setX(int x) {
		this.x = x;
	}
	public int getY() {
		return y;
	}
	public void setY(int n) {
		this.y = n;
	}
	
	public boolean getMoving() {
		return moving;
	}
	public void setMoving(boolean moving) {
		this.moving = moving;
	}
	
	public boolean geteasyMode() 
	{
		return this.easyMode;
	}
	
	
	
	
	
	
	
public void move() {
  final int maxY = 472; // Adjust this value as needed for the maximum height
  final int minY = 0;   // Adjust this value as needed for the minimum height
  int jumpSpeed = -4; // Adjust jump speed as needed
  if (easyMode == false)
  {
	  
	  if(Level2.getisOnLevel() == false)
	  {
		  if(isJumping == true)
		  {
			  y-= 5;
		  }
		  y += 3;
		  
		  
		 
		  
		  /*if (this.getMoving()) {
			  if (isJumping && y > 0) {
				  speed = jumpSpeed; // Jump speed
				  y += speed; // Adjust the bird's position based on speed
			  } else {
				  speed += 1; // Acceleration/gravity
				  y += speed; // Adjust the bird's position based on speed
    
				  if (y < 0) {
					  y = 0;
					  speed = 0; // Stop the upward motion when reaching the top
				  }
			  }
		  */
	  }
	  else
	  {
		  
		  if(isJumping == true)
		  {
			  y+= 5;
		  }
		  y -= 3;
		  
		  /*if (this.getMoving()) {
			  if (isJumping && y < 756 ) {
				  jumpSpeed = 4;
				  speed = jumpSpeed; // Jump speed
				  y += speed; // Adjust the bird's position based on speed
			  } else {
				  speed -= 1; // Acceleration/gravity
				  y += speed; // Adjust the bird's position based on speed
				  if (y > 756) {
					  y = 756;
					  speed = 0; // Stop the upward motion when reaching the top
				  }
			  }
		  }*/
	  }
  }
  else
  {
	  if (right){
		  xa = 2;
		  }
		  if (left){
		  xa = -2;
		  }
		  if (down){
		  ya = 2;
		  }
		  if (up){
		  ya = -2;
		  }
		  x+=xa;
		  y+=ya;
  }
}
public void move2()
{
	
	  if (y == 25)
	  {
		  moveUp = false;
		  moveDown = true;
	  }
	  if (y == 56)
	  {
		  moveUp = true;
		  moveDown = false;
	  }
	
	  if (moveUp == true)
	  {
		  y -= 1;
	  }
	  if (moveDown == true)
	  {
		  y += 1;
	  }
	
}
public void move3()
{
	if(easyMode == false)
	{
	  if (y == 309)
	  {
		  moveUp = false;
		  moveDown = true;
	  }
	  if (y >= 340)
	  {
		  moveUp = true;
		  moveDown = false;
	  }
	
	  if (moveUp == true)
	  {
		  y -= 1;
	  }
	  if (moveDown == true)
	  {
		  y += 1;
	  }
	}
}
public boolean gameOver()
{
	return gameOver = true;
}
public void keyPressed(KeyEvent e) {
	if (e.getKeyCode() == KeyEvent.VK_E) {
	  	easyMode = true; // Set jumping flag on space key press
  	}
	if (e.getKeyCode() == KeyEvent.VK_F) {
	  	easyMode = false; // Set jumping flag on space key press
  	}
  if (easyMode == false)
  {
	if (e.getKeyCode() == KeyEvent.VK_SPACE) {
	  	isJumping = true; // Set jumping flag on space key press
  	}
	
  }
  if(easyMode == true)
  {
	  if (e.getKeyCode() == KeyEvent.VK_LEFT){
		  left = true;
		  }
		  if (e.getKeyCode() == KeyEvent.VK_RIGHT){
		  right = true;
		  }
		  if (e.getKeyCode() == KeyEvent.VK_UP){
		  up = true;
		  }
		  if (e.getKeyCode() == KeyEvent.VK_DOWN){
		  down = true;
		  }
  }
}
public void keyReleased(KeyEvent e) {
  if (e.getKeyCode() == KeyEvent.VK_SPACE) {
      isJumping = false; // Reset jumping flag on space key release
  }
  if (e.getKeyCode() == KeyEvent.VK_LEFT){
	  left = false;
	  xa=0;
	  }
	  if (e.getKeyCode() == KeyEvent.VK_RIGHT){
	  right = false;
	  xa=0;
	  }
	  if (e.getKeyCode() == KeyEvent.VK_UP){
	  up = false;
	  ya=0;
	  }
	  if (e.getKeyCode() == KeyEvent.VK_DOWN){
		  down = false;
		  ya=0;
		  }

}
	public void paint(Graphics2D g) {
		g.setColor(Color.RED);
		int borderThickness = 1;
	    g.setStroke(new BasicStroke(borderThickness));
	    if (Level1.getisOnLevel() == true && Level1.getisOnInifniteMode() == true)
		{
			 g.drawImage(jeffery, x, y- 40, 100, 100, null);
				g.drawRect(x + 23, y - 12, 55, 41);
		}
		else if (Level1.getisOnLevel() == true)
		{
			 g.drawImage(flappy, x, y-40, 100, 100, null);
				//Flappy hitbox
				if(easyMode == true)
				{
				g.drawRect(x + 15, y - 12, 54, 38);
				}
		}
		else if (Level2.getisOnLevel() == true)
		{
			g.drawImage(turtle, x, y-40, 100, 100, null);
			//turtle hitbox
			if(easyMode == true)
			{
			
			g.drawRect(x + 20, y - 10, 55, 52);
			}
		}
		else if (Level3.getisOnLevel() == true)
		{
			g.drawImage(Pumpkin, x, y-40, 100, 100, null);
			//Pumpkin hitbox
			if(easyMode == true)
			{
			g.drawRect(x + 8, y -1 , 73, 54);
			}


		}
		else if (Level4.getisOnLevel() == true)
		{
			g.drawImage(snowman, x, y-40, 100, 100, null);
			//snowman hitbox
			if(easyMode == true)
			{
			g.drawRect(x + 30, y - 2, 35, 53);
			}
		}
		else 
		{
			g.drawImage(mike, x, y-40, 100, 100, null);
			//mike hitbox
			if(easyMode == true)
			{
			g.drawRect(x + 15, y - 15, 56, 58);
			}
		}
		
		
	}
}
