import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import javax.swing.*;
import javax.swing.JButton;
public class AirborneAdventure extends JPanel implements ActionListener {
	private int x = 0;
	private PipeThingy[] p = new PipeThingy[7];
	private Level1 level1 = new Level1(this);//525
	private Level2 level2 = new Level2(this);
	private Level3 level3 = new Level3(this);
	private Level4 level4 = new Level4(this);
	private Level5 level5 = new Level5(this);
	private GravityandCollision gc = new GravityandCollision(230, 55, false, level1, level2, level3, level4, level5);//550 //390
	private ProgressionBar pb =  new ProgressionBar(1250, this, level1, level2, level3, level4, level5, gc);


	private LevelIntros LevelIntros = new LevelIntros(level1, level2, level3, level4, level5); 
    private Clicky Clicky = new Clicky(level1, level2, level3, level4, level5, this, gc, pb, LevelIntros);
	private Collision Collision = new Collision(level1, level2, level3, level4, level5, p, gc, Clicky, pb, this);
	private Medal Medal = new Medal(level1, level2, level3, level4, level5,770 + 350 * (int) (3 * Math.random()) + 2 , 
			(int) (300 * Math.random()) - 100, gc, Clicky, pb, Collision);
	private PowerUps PowerUps = new PowerUps(this, gc, p, pb, level1, level2, level3, level4, level5, Medal);

	private Instructions instructions = new Instructions(); 
	private Backstory Backstory = new Backstory(); 
	private LevelSelect LevelSelect = new LevelSelect(level1, level2, level3, level4, level5); 



	private boolean gameStarted = false;
	private boolean gamePhase1 = false;

	
	private int temp = 1;
    private boolean teleport = false;
   

    
 
	AirborneAdventure() {
		for (int i = 0; i < p.length; i++) {
			p[i] = new PipeThingy(((int) (175 * Math.random()) + 275), level1, level2, level3, level4, level5 );
			p[i].setX(350 * i + 700);

			//p[i] = new PipeThingy((int) (325 * Math.random()) + 350);
			//p[i].setX(300);
			//if(i == p.length - 1)
			//{
			//pb = new ProgressionBar(350 * i + 900, this, level1, level2, level3, level4, level5, gc);
			//}
		}
		
  addKeyListener(new KeyAdapter() {
      @Override
      public void keyPressed(KeyEvent e) {
          gc.keyPressed(e);
          PowerUps.keyPressed(e);
          level1.keyPressed(e);
          if (e.getKeyCode() == KeyEvent.VK_SPACE && Clicky.getisOnHomeScreen() == false && Clicky.getisLevelSelect() == false) {
              if (gamePhase1 == true)
              {
            	  gameStarted = true; // Start the game when the up arrow key is pressed

              }
          }
          
          if (e.getKeyCode() == KeyEvent.VK_ESCAPE && LevelIntros.getisOnLevelIntros() == false)
          {
        	  Clicky.setisLevelSelect(true);
        	  Clicky.setisOnBackStory(false);
        	  Clicky.setisOnInstructions(false);
        	  if (level1.getisOnLevel() == true)
        	  {
        		  gamePhase1 = true;
        	  }
        	  reset();
          }
        	  
      }
      @Override
      public void keyReleased(KeyEvent e) {
          gc.keyReleased(e);
          PowerUps.keyReleased(e);
      }
  
  });

  addMouseListener(Clicky);
  setFocusable(true);
	}
	
	public void reset()
	{
		Collision.sethitsPipe(false);
		gameStarted = false;
		Collision.setScore(0);
		teleport = false;
		for (int i = 0; i < p.length; i++) 
		{
			if (level2.getisOnLevel() == true)
			{
				p[i].setHeight( 350 + 30 * (int) (8   * Math.random()) + 1);
			}
			else if(level3.getisOnLevel() == true)
			{
				p[i].setHeight(((int) (225 * Math.random()) + 250));
			}
			else if (level4.getisOnLevel() == true)
			{
				p[i].setHeight( 275 + 5 * (int) (35 * Math.random()) + 1);
				p[i].setY(0);
			}
			else
			{
				p[i].setHeight((int) (175 * Math.random()) + 275);
			}
			p[i].setX(350 * i + 700);
			if(i == p.length - 1)
			{
				pb.setX(350 * i + 900);
			}
		}
		Medal.setX(770 + 350 * (int) (3 * Math.random()) + 2);
		if(level2.getisOnLevel() == true)
		{
			Medal.setY(((int) (300 * Math.random())));
		}
		else
		{
		Medal.setY((int) (300 * Math.random()) - 100);
		}
		PowerUps.setreset(false);
	}
	
	public void FullGameReset()
	{
		Collision.sethitsPipe(false);
		gameStarted = false;
		Collision.setScore(0);
		teleport = false;
		level1.setisCompleted(false);
		level1.setisMedalCollected(false);
		level1.setisOnInfiniteMode(false);
		level1.setisOnLevel(true);
		
		level2.setisCompleted(false);
		level2.setisMedalCollected(false);
		level2.setisOnLevel(false);
		
		level3.setisCompleted(false);
		level3.setisMedalCollected(false);
		level3.setisOnLevel(false);
		
		level4.setisCompleted(false);
		level4.setisMedalCollected(false);
		level4.setisOnLevel(false);
		
		level5.setisCompleted(false);
		level5.setisMedalCollected(false);
		level5.setisOnLevel(false);
		for (int i = 0; i < p.length; i++) 
		{
			p[i].setHeight(((int) (175 * Math.random()) + 275));
			p[i].setX(350 * i + 700);
		}
		Medal.setX(770 + 350 * (int) (3 * Math.random()) + 2);
		Medal.setY((int) (300 * Math.random()) - 100);
		pb.setEndOfScreen(false);
		Clicky.setisOnHomeScreen(true);
		gc.setX(230);
		gc.setY(55);
		gameStarted = false;
		gamePhase1 = false;
	}
	
	public void setGamePhase1(boolean value) {
      gamePhase1 = value;
    }
	
	public boolean getGamePhase1()
	{
		return gamePhase1;
	}
	
	public boolean getGameStarted()
	{
		return gameStarted;
	}
	
	public void setGameStarted (boolean value) {
		gameStarted = value;
	    }

	
	
	private void move() {
		if (x <= -1000)
		{
			x+= 1000;
		}
	 if (Collision.gethitsPipe() == false && pb.getendOfScreen() == false)
	 {
		  x-= 2;
	 }
	 if (gamePhase1 == true && Collision.gethitsPipe() == false)
	 {
		 if (teleport == false)
		 {
				 
			 level1.setY(-50);
			 gc.setY(341);
			 teleport = true;
		 }
		 if(gameStarted == false)
		 {
			 gc.move3();
		 }
	 }
	  if (gameStarted == false  && gamePhase1 == false && level1.getisOnLevel() == true)
	  {
		  gc.move2();
	  }
	
  if (!gc.getMoving()) {
      gc.setMoving(true); // Start the game when the up arrow key is pressed
  }
  if(PowerUps.getFireBall() == false)
  {
	  Collision.CheckForCollision();
  }  
	 
		 
	
	
  
  for (PipeThingy pipe : p) {
	   if (Collision.gethitsPipe() == false && pb.getendOfScreen() == false && gameStarted == true) {
		   pipe.move();
		   if(level3.getisOnLevel() == true)
		   {
			   pipe.move2();
		   }
		   if(level4.getisOnLevel() == true)
		   {
			   pipe.move3();
		   }
		   
	   }
  }
  
  if(level1.getisOnLevel() == true && level1.getisOnInifniteMode() == true)
  {
	  for (int i = 0; i < p.length; i++)
	  {
		  if(p[i].getX() + 75 < 0)
		  {
			  p[i].setX(p[temp].getX() + 350);
			  p[i].setHeight((int) (175 * Math.random()) + 275);
			  temp = i;
		  }
	  }
  }
	   if (Collision.gethitsPipe() == false && pb.getendOfScreen() == false && gameStarted == true) {
	       pb.move();
		   Medal.move();

	   }
	 
	
		 if (Collision.gethitsPipe() == false && gameStarted == true && pb.getendOfScreen() == false) {
				gc.move();
		 }
		
		 if(pb.getendOfScreen() == true)
		 {
			 p[p.length -1].setX(-100);
		 }
		Collision.move();
		PowerUps.move();
		repaint();
	}
	public void paint(Graphics g) {
		Graphics2D g2d = (Graphics2D) g;
		level1.paint(g2d);	
		if (level2.getisOnLevel() == true)
		{
		   level2.paint(g2d);
		}
		if (level3.getisOnLevel() == true)
		{
			level3.paint(g2d);
		}
		
		if (level4.getisOnLevel() == true)
		{
			level4.paint(g2d);
		}
		if (level5.getisOnLevel() == true)
		{
			level5.paint(g2d);
		}
		if(level1.getisOnInifniteMode() == false)
		{
		pb.paint(g2d);
		}
		
		
		
		 
		 
		 g2d.setColor(Color.RED);
		 if (Clicky.getisInstructions() == true)
		 {
			instructions.paint(g2d);
		 }
		 if (Clicky.getisBackstory() == true)
		 {
			 Backstory.paint(g2d);
		 }
		 if (Clicky.getisBackstory() == true)
		 {
			 Backstory.paint(g2d);
		 }
		 if (Clicky.getisLevelSelect() == true)
		 {
			 LevelSelect.paint(g2d);
		 }
		 
		 
		
		
			 
		 for (PipeThingy pipe : p) 
		 {
				 pipe.paint(g, getHeight());
		 }
		
		 if (Clicky.getisInstructions() == false && Clicky.getisBackstory() == false && Clicky.getisLevelSelect() == false)
		 {
			 gc.paint(g2d);
		 }
		 if (pb.getendOfScreen() == true)
		 {
			 pb.paint(g2d);
		 }

		 Collision.paint(g2d);
		 Collision.score();
		 Clicky.paint(g2d);
		 if(Clicky.getisOnHomeScreen() == false && pb.getendOfScreen() == false && Collision.gethitsPipe() == false 
				 && LevelIntros.getisOnLevelIntros() == false && Clicky.getisInstructions() == false 
				 && Clicky.getisBackstory() == false && Clicky.getisLevelSelect() == false)
		 PowerUps.paint(g2d);
		 Medal.paint(g2d);

		 //g2d.fillRect(266, 557, 164, 44);
		 //g2d.fillRect(86, 555, 164, 44);
	}	
	
	
	public int getPanelHeight() {
		return this.getHeight();
	}
	
	public int getPanelWidth() {
		return this.getWidth();
	}
	public static void main(String[] args) throws InterruptedException {
		  SwingUtilities.invokeLater(() -> {
		        JFrame frame = new JFrame("Airborne Adventure");
		   
		        AirborneAdventure panel = new AirborneAdventure();
		   
		        frame.add(panel);
		        frame.setSize(530, 800);
		        frame.setVisible(true);
		        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		        frame.setLayout(null);
		        frame.addMouseListener(panel.Clicky);		    
		        // Game loop with Swing Timer
		        Timer timer = new Timer(10, new ActionListener() {
		            @Override
		            public void actionPerformed(ActionEvent e) {
		                panel.move();
		                panel.repaint();
		            }
		        });
		        timer.start(); // Start the timer
		    });
	}
	@Override
	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub
		
	}
}
