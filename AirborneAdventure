import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import javax.swing.*;
import javax.swing.JButton;
public class AirborneAdventure extends JPanel implements ActionListener {
	private int x = 0;
	private PipeThingy[] p = new PipeThingy[7];
	private Level1 level1 = new Level1(0, 400, this);//525
	private Level2 level2 = new Level2(this);
	private Level3 level3 = new Level3(this);
	private Level4 level4 = new Level4(this);
	private Level5 level5 = new Level5(this);
	private PowerUps PowerUps = new PowerUps(this);
	private GravityandCollision gc = new GravityandCollision(230, 55, false, level1, level2, level3, level4, level5);//550 //390
    private Clicky Clicky = new Clicky(level1, level2, level3, level4, level5, this, gc);
	private Collision Collision = new Collision(level1, level2, level3, level4, level5, p, gc, Clicky);


	private ProgressionBar pb;
	private Instructions instructions = new Instructions(this); 
	private Backstory Backstory = new Backstory(this); 

	private boolean gameStarted = false;
	private boolean gamePhase1 = false;

	
	private int score = 0;
    private boolean teleport = false;
   
    private boolean b = false;
    private boolean c = false;
    private boolean d = false;
    private boolean e = false;
    private boolean ENDOFSCREEN = false;
    
 
	AirborneAdventure() {
		for (int i = 0; i < p.length; i++) {
			p[i] = new PipeThingy(((int) (325 * Math.random()) + 200), level1, level2, level3, level4, level5 );
			p[i].setX(350 * i + 700);
			//p[i] = new PipeThingy((int) (325 * Math.random()) + 350);
			//p[i].setX(300);
			if(i == p.length - 1)
			{
			pb = new ProgressionBar(350 * i + 900, this, level1, level2, level3, level4, level5, gc);
			}
		}
		
  addKeyListener(new KeyAdapter() {
      @Override
      public void keyPressed(KeyEvent e) {
          gc.keyPressed(e);
          level1.keyPressed(e);
          if (e.getKeyCode() == KeyEvent.VK_SPACE) {
              if (gamePhase1 == true)
              {
            	  gameStarted = true; // Start the game when the up arrow key is pressed

              }
          }
      }
      @Override
      public void keyReleased(KeyEvent e) {
          gc.keyReleased(e);
      }
  
  });
  addMouseListener(Clicky);
  setFocusable(true);
	}
	
	public void reset()
	{
		Collision.sethitsPipe(false);
		gameStarted = false;
		gc.setY(55);
		score = 0;
		teleport = false;
		for (int i = 0; i < p.length; i++) 
		{
			if (level2.getisOnLevel() == true)
			{
				p[i].setHeight((int) (325 * Math.random()) + 350);
			}
			else
			{
				p[i].setHeight((int) (325 * Math.random()) + 200);
			}
			p[i].setX(350 * i + 700);
			if(i == p.length - 1)
			{
				pb.setX(350 * i + 900);
			}
		}
		
		
	}
	
	public void setGamePhase1(boolean value) {
      gamePhase1 = value;
    }
	
	public boolean getGamePhase1()
	{
		return gamePhase1;
	}
	
	public boolean getGameStarted()
	{
		return gameStarted;
	}
	
	public void setGameStarted (boolean value) {
		gameStarted = value;
	    }
	public boolean getENDOFSCREEN()
	{
		return ENDOFSCREEN;
	}
	
	
	private void move() {
		if (x <= -1000)
		{
			x+= 1000;
		}
	 if (Collision.gethitsPipe() == false && pb.getendOfScreen() == false)
	 {
		  x-= 2;
	 }
	 if (gamePhase1 == true && Collision.gethitsPipe() == false)
	 {
		 if (teleport == false)
		 {
			 gc.setY(341);
			 teleport = true;
		 }
		 gc.move3();
	 }
	  if (gameStarted == false  && gamePhase1 == false)
	  {
		gc.move2();
	  }
	
  if (!gc.getMoving()) {
      gc.setMoving(true); // Start the game when the up arrow key is pressed
  }
  Collision.CheckForCollision();
	  
	 
		 
	
	
  
  for (PipeThingy pipe : p) {
	   if (Collision.gethitsPipe() == false && pb.getendOfScreen() == false && gameStarted == true) {
		   pipe.move(); // Pass game start status to pipes
		   if(pipe.getX() == 190)
		   {
			   score += 1;
		   }
	   }
	
  }
	   if (Collision.gethitsPipe() == false && pb.getendOfScreen() == false && gameStarted == true) {
	       pb.move();
	   }
	 
	
		 if (Collision.gethitsPipe() == false && gameStarted == true && pb.getendOfScreen() == false) {
				gc.move();
		 }
		
		 if(pb.getendOfScreen() == true)
		 {
			 p[p.length -1].setX(-100);
		 }
		 if (level1.getisOnLevel() == true && Collision.gethitsPipe() == false)
		 {
			 level1.move();

		 }
		 if (level2.getisOnLevel() == true && Collision.gethitsPipe() == false)
		 {
			 if (b == false)
			 {
				 pb.setEndOfScreen(false);
				 b = true;
			 }
			 level2.move();
		 }
		 
		 if (level3.getisOnLevel() == true && Collision.gethitsPipe() == false)
		 {
			 if (c == false)
			 {
				 pb.setEndOfScreen(false);
				 c = true;
			 }
			 level3.move();
		 }
		 
		 if (level4.getisOnLevel() == true && Collision.gethitsPipe() == false)
		 {
			 if (d == false)
			 {
				 pb.setEndOfScreen(false);
				 d = true;
			 }
			 level4.move();
		 }
		 
		 if (level5.getisOnLevel() == true && Collision.gethitsPipe() == false)
		 {
			 if (e == false)
			 {
				 pb.setEndOfScreen(false);
				 e = true;
			 }
			 level5.move();
		 }
		 
		 if (pb.getendOfScreen() == true)
		 {
			 ENDOFSCREEN = true;
		 }
		 else
		 {
			 ENDOFSCREEN = false;
		 }
		//PowerUps.move();
		repaint();
	}
	public void paint(Graphics g) {
		Graphics2D g2d = (Graphics2D) g;
		level1.paint(g2d);	
		if (level2.getisOnLevel() == true)
		{
		   level2.paint(g2d);
		}
		if (level3.getisOnLevel() == true)
		{
			level3.paint(g2d);
		}
		
		if (level4.getisOnLevel() == true)
		{
			level4.paint(g2d);
		}
		if (level5.getisOnLevel() == true)
		{
			level5.paint(g2d);
		}
		pb.paint(g2d);

		
		
		 g2d.setColor(Color.WHITE);
		 Font scoreFont1 = new Font("Bangers", Font.BOLD, 75);
		 Font scoreFont2 = new Font("Bangers", Font.BOLD, 30);
		 g2d.setFont(scoreFont1);
		 if (pb.getendOfScreen() == false)
		 {
			 if(gamePhase1 == false)
			 {
					g2d.drawString(Integer.toString(score), -10, -10);

			 }
				if (level1.getisOnLevel() == true && gameStarted == true)
				{
					g2d.drawString(Integer.toString(score), 250, 100);
				}
				else
				{
					//g2d.setColor(Color.BLUE);
				  	//g2d.drawString(Integer.toString(score), 250, getHeight() - 50);

				}
		 }
		
			 //g2d.setFont(scoreFont2);
			 //g2d.drawString(Integer.toString(score), 330, 288);
		 
		 
		 g2d.setColor(Color.RED);
		 if (Clicky.getisInstructions() == true)
		 {
			instructions.paint(g2d);
		 }
		 if (Clicky.getisBackstory() == true)
		 {
			 Backstory.paint(g2d);
		 }
		 
		 
		
		
			 
		 for (PipeThingy pipe : p) 
		 {
				 pipe.paint(g, getHeight());
		 }
		
		 if (Clicky.getisInstructions() == false && Clicky.getisBackstory() == false)
		 {
			 gc.paint(g2d);
		 }
		 if (pb.getendOfScreen() == true)
		 {
			 pb.paint(g2d);
		 }

		 Collision.paint(g2d);
		 Clicky.paint(g2d);
		 //PowerUps.paint(g2d);


	}
	
	public int getPanelHeight() {
		return this.getHeight();
	}
	
	public int getPanelWidth() {
		return this.getWidth();
	}
	public static void main(String[] args) throws InterruptedException {
		  SwingUtilities.invokeLater(() -> {
		        JFrame frame = new JFrame("Airborne Adventure");
		   
		        AirborneAdventure panel = new AirborneAdventure();
		   
		        frame.add(panel);
		        frame.setSize(530, 800);
		        frame.setVisible(true);
		        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		        frame.setLayout(null);
		        frame.addMouseListener(panel.Clicky);		    
		        // Game loop with Swing Timer
		        Timer timer = new Timer(10, new ActionListener() {
		            @Override
		            public void actionPerformed(ActionEvent e) {
		                panel.move();
		                panel.repaint();
		            }
		        });
		        timer.start(); // Start the timer
		    });
	}
	@Override
	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub
		
	}
}
