import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;

public class Collision {
	//Creating instances of other classes
	private Level1 Level1;
	private Level2 Level2;
	private Level3 Level3;
	private Level4 Level4;
	private Level5 Level5;
	private PipeThingy[] p = new PipeThingy[1];
	private Character c;
	private ProgressionBar pb;
	private Clicky Clicky;
	private boolean hitsPipe = false;
	private BufferedImage Level1GameOver = null;
	private BufferedImage Level2GameOver = null;
	private BufferedImage Level3GameOver = null;
	private BufferedImage Level4GameOver = null;
	private BufferedImage Level5GameOver = null;
	private AirborneAdventure gamePanel;
	private int score = 0;
	private int next = 1;
	private boolean a = true;
	private int HighScore = 0;



	Collision(Level1 a, Level2 b, Level3 c, Level4 d, Level5 f, PipeThingy [] p, Character C, Clicky Clicky, ProgressionBar pb, AirborneAdventure gamePanel){
		for (int i = 0; i < p.length; i++) {
			p[i] = new PipeThingy(((int) (325 * Math.random()) + 200), a, b, c, d, f);
			p[i].setX(350 * i + 700);
		}
		this.Level1 = a;
		this.Level2 = b;
		this.Level3 = c;
		this.Level4 = d;
		this.Level5 = f;
		this.p = p;
		this.c = C;
		this.Clicky = Clicky;
		this.pb = pb;
		this.gamePanel = gamePanel;
		try {
		Level1GameOver = ImageIO.read(new File("Level1GameOver.png"));
		Level2GameOver = ImageIO.read(new File("Level2GameOver.png"));
		Level3GameOver = ImageIO.read(new File("Level3GameOver.png"));
		Level4GameOver = ImageIO.read(new File("Level4GameOver.png"));
		Level5GameOver = ImageIO.read(new File("Level5GameOver.png"));
		} catch (IOException e) {
		    System.out.println("No Image");
		}
	}
	public boolean gethitsPipe()
	{
		return this.hitsPipe;
	}
	
	public void sethitsPipe(boolean value)
	{
		this.hitsPipe = value;
	}
	
	
	public int getScore()
	{
		return this.score;
	}
	
	public void setScore(int value)
	{
		this.score = value;
	}
	
	public void CheckForCollision()
	{
		if(pb.getendOfScreen() == false)
		{
		for (int i = 0; i < p.length; i++)
		{
		if(Level1.getisOnLevel() == true && Level1.getisOnInifniteMode() == true)
		{
			if (c.getX() + 78 >= p[i].getX() && c.getX() + 23 <= p[i].getX() + 75 && (c.getY() - 12 <= p[i].getHeight() - 123 || c.getY() + 29 >= p[i].getHeight()))
		  	{
		  		hitsPipe = true;
		  		//g.drawRect(x + 23, y - 12, 55, 41);

		  	}
		  	if(c.getY() + 29 > 607)
			  {
		  		hitsPipe = true;			  
		  	  }
		}
		
		else if(Level1.getisOnLevel() == true)
		  {
		  	if (c.getX() + 69 >= p[i].getX() && c.getX() + 15 <= p[i].getX() + 75 && (c.getY() - 12 <= p[i].getHeight() - 123 || c.getY() + 26 >= p[i].getHeight()))
		  	{
		  		hitsPipe = true;
		  		 //g.drawRect(x + 15, y - 12, 54, 38);
		  	}
		  	if(c.getY() + 26 > 607)
			  {
		  		hitsPipe = true;			  
		  	  }

		  	
		  }
		  if(Level2.getisOnLevel() == true)
		  {
		  	if (c.getX() + 75 >= p[i].getX() && c.getX() + 20 <= p[i].getX() + 75 && (c.getY() - 10 <= p[i].getHeight() - 123 || c.getY() + 42 >= p[i].getHeight()))
		  	{
		  		hitsPipe = true;
		  		 //g.drawRect(x + 20, y - 10, 55, 52);
		  	}
		  	if(c.getY() - 10 < 157)
			   {
		  		hitsPipe = true;
			   }
		  }	   
		  if(Level3.getisOnLevel() == true)
		  {
			if (c.getX() + 81 >= p[i].getX() && c.getX() + 8 <= p[i].getX() + 75 && (c.getY() - 1 <= p[i].getHeight() - 133 || c.getY() + 44 >= p[i].getHeight()))
		  	{
		  		hitsPipe = true;
		  		 //g.drawRect(x + 8, y - 15, 73, 68);
		  	}
		  	if(c.getY() + 53 > 607)
			  {
		  		hitsPipe = true;
			  }
		  }
		  if(Level4.getisOnLevel() == true)
		  {
		  	if (c.getX() + 65 >= p[i].getX() && c.getX() + 30 <= p[i].getX() + 75 && (c.getY() - 2 <= p[i].getHeight() - 123 || c.getY() + 51 >= p[i].getHeight()))
		  	{
		  		hitsPipe = true;
		  		 //g.drawRect(x + 30, y - 2, 35, 53);
		  	}
		  	if(c.getY() + 51 > 607)
			  {
		  		hitsPipe = true;
			  }
		  }
		  
		  if(Level5.getisOnLevel() == true)
		  {
		  	if (c.getX() + 71 >= p[i].getX() && c.getX() + 15 <= p[i].getX() + 75 && (c.getY() - 15 <= p[i].getHeight() - 123 || c.getY() + 43 >= p[i].getHeight()))
		  	{
		  		hitsPipe = true;
		  		 //g.drawRect(x + 15, y - 15, 56, 58);
		  	}
		  	if(c.getY() + 43 > 607)
			  {
		  		hitsPipe = true;
			  }
		  }
		  }
		}
		if(hitsPipe == true)
		{
			Clicky.setgameOver(true);
			for (PipeThingy pipe : p) {
			if(Level1.getisOnLevel() == true && Level1.getisOnInifniteMode() == true)
			{
				if(pipe.getX() + 75 == 190)
				{
					   score += 1;
             	}
			}
			}
		}
		else
		{
			Clicky.setgameOver(false);

		}
		
	}
	
	public void paint(Graphics2D g) 
	{
		Graphics2D g2d = (Graphics2D) g;
		if(hitsPipe == true)
		{
			if(Level1.getisOnLevel() == true)
			{
				g.drawImage(Level1GameOver, 35, 90, 510, 610, null);
			}
			if(Level2.getisOnLevel() == true)
			{
				g.drawImage(Level2GameOver, 35, 90, 510, 610, null);
			}
			if(Level3.getisOnLevel() == true)
			{
				g.drawImage(Level3GameOver, 35, 90, 510, 610, null);
			}
			if(Level4.getisOnLevel() == true)
			{
				g.drawImage(Level4GameOver, 35, 90, 510, 610, null);
			}
			if(Level5.getisOnLevel() == true)
			{
				g.drawImage(Level5GameOver, 35, 90, 510, 610, null);
			}
		}
		
		 g2d.setColor(Color.WHITE);
		 Font scoreFont1 = new Font("Bangers", Font.BOLD, 75);
		 Font scoreFont2 = new Font("Bangers", Font.BOLD, 30);
		 g2d.setFont(scoreFont1);
		 if(pb.getendOfScreen() == false)
		 {
		 if (hitsPipe == false)
		 {
			 if(gamePanel.getGamePhase1() == false)
			 {
					g2d.drawString(Integer.toString(score), -10, -10);
			 }
				if (Level1.getisOnLevel() == true && gamePanel.getGameStarted() == true && Clicky.getisLevelSelect() == false)
				{
					g2d.drawString(Integer.toString(score), 250, 100);
				}
				if (Level2.getisOnLevel() == true && Level2.getStart() == true && Clicky.getisLevelSelect() == false)
				{
					g2d.setColor(Color.BLUE);
				  	g2d.drawString(Integer.toString(score), 250, 700);
				}
				if (Level3.getisOnLevel() == true && Level3.getStart() == true && Clicky.getisLevelSelect() == false)
				{
					g2d.setColor(Color.ORANGE);
				  	g2d.drawString(Integer.toString(score), 250, 100);
				}
				if (Level4.getisOnLevel() == true && Level4.getStart() == true && Clicky.getisLevelSelect() == false)
				{
					g2d.setColor(Color.GREEN);
				  	g2d.drawString(Integer.toString(score), 250, 100);
				}
				if (Level5.getisOnLevel() == true && Level5.getStart() == true && Clicky.getisLevelSelect() == false)
				{
					g2d.setColor(Color.RED);
				  	g2d.drawString(Integer.toString(score), 250, 100);
				}
		 }
		 else
		 {
			 if(Level1.getisOnLevel() == true)
			 {
				 g2d.setFont(scoreFont2);
				 g2d.drawString(Integer.toString(score), 354, 362);
				 if(Level1.getisOnInifniteMode() == true)
				 {
				 g2d.drawString(Integer.toString(HighScore), 354, 412);
				 }
			 }
			 if(Level2.getisOnLevel() == true)
			 {
				 g2d.setColor(Color.BLUE);
				 g2d.setFont(scoreFont2);
				 g2d.drawString(Integer.toString(score), 354, 362);
			 }
			 if(Level3.getisOnLevel() == true)
			 {
				 g2d.setColor(Color.ORANGE);
				 g2d.setFont(scoreFont2);
				 g2d.drawString(Integer.toString(score), 354, 362);
			 }
			 if(Level4.getisOnLevel() == true)
			 {
				 g2d.setColor(Color.GREEN);
				 g2d.setFont(scoreFont2);
				 g2d.drawString(Integer.toString(score), 354, 362);
			 }
			 if(Level5.getisOnLevel() == true)
			 {
				 g2d.setColor(Color.RED);
				 g2d.setFont(scoreFont2);
				 g2d.drawString(Integer.toString(score), 354, 362);
			 }
			 
		 }
		 }
		
			 //g2d.setFont(scoreFont2);
			 //g2d.drawString(Integer.toString(score), 330, 288);
		
	}
	
	public void move()
	{
		 if (Level1.getisOnLevel() == true && hitsPipe == false)
		 {
			 Level1.move();

		 }
		 if (Level2.getisOnLevel() == true && hitsPipe == false)
		 {
			 Level2.move();
		 }
		 
		 if (Level3.getisOnLevel() == true && hitsPipe == false)
		 {
			 
			 Level3.move();
		 }
		 
		 if (Level4.getisOnLevel() == true && hitsPipe == false)
		 {
			 
			 Level4.move();
		 }
		 
		 if (Level5.getisOnLevel() == true && hitsPipe == false)
		 {
			 Level5.move();
		 }
	}
	
	public void score()
	{
		 for (int i =0; i < p.length; i++) 
		 {
			 if (hitsPipe == false && pb.getendOfScreen() == false)
			 {
				   if(p[i].getX() == 170 || p[i].getX() == 169 && a == true)
				   {
					   score += 1;
					   if (score >= HighScore)
					   {
						   HighScore = score;
					   }
					   if (next == 1)
					   {
						   next = 0;
					   }
					   else
					   {
						   next = 1;
					   }
					   a = false;
				   }
			   
				   if(p[i].getX() == 150 || p[i].getX() == 149 && a == false)
				   {
					   a = true; 
				   }
			 }
		  }
	}
	
	public void deathAnimation()
	{
		if (hitsPipe == true)
		{
			if(Level2.getisOnLevel() == true)
			{
				c.setY(c.getY() - 5);
			}
			else
			{
			c.setY(c.getY() + 5);
			}
		}
	}
}
